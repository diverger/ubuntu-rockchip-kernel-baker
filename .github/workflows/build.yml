name: "Build on dispatch"
run-name: "Build for ${{ github.event.inputs.Suite }} by @${{ github.actor }} (Trigger: ${{ github.event.inputs.trigger_source }})"

on:
  workflow_dispatch:
    inputs:
      suite:
        description: "Suite name"
        required: true
        type: choice
        default: "noble"
        options:
        - "jammy"
        - "noble"
      trigger_source:
        description: "Source of the trigger (e.g., manual, workflow)"
        required: false
        type: string
        default: "manual"

env:
  RECIPE_REPO: "diverger/ubuntu-rockchip"
  RECIPE_PATH: "."
  KERNEL_PATH: "./build/kernel"

jobs:
  build:
    if: ${{ github.repository_owner == 'diverger'}}
    runs-on: ubuntu-latest
    name: Build kernel

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ github.event.inputs.trigger_source }}"

        # - name: Manual Trigger Step
        #   if: github.event.inputs.trigger_source == 'manual'
        #   run: echo "This step runs only for manual triggers."

        # - name: Workflow Trigger Step
        #   if: github.event.inputs.trigger_source == 'workflow'
        #   run: echo "This step runs only when triggered by another workflow."

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_PATH }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Install zstd # New step
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd

      - name: Set artifact variables
        id: vars
        run: |
          suite_ver=${{ github.event.inputs.suite == 'jammy' && '5.10' || github.event.inputs.suite == 'noble' && '6.1' }}
          artifact_name="linux-rockchip-${suite_ver}"
          artifact_path="${{ env.KERNEL_PATH }}/linux-*.deb"
          echo "artifact_name=${artifact_name}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT

      - name: Hash source files
        id: hash
        shell: bash
        run: |
          # Include all files/dirs in *this* repo that affect the build output
          echo "files_hash=$(find ${{ env.RECIPE_PATH }}/scripts/build-kernel.sh ${{ env.RECIPE_PATH }}/build.sh ${{ env.RECIPE_PATH }}/config -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | awk '{ print $1 }')" >> $GITHUB_OUTPUT

      - name: Show source files hash
        run: echo "Calculated files_hash is ${{ steps.hash.outputs.files_hash }}"

      - name: Cache kernel artifact archive
        id: cache-kernel-archive
        uses: actions/cache@v4
        with:
          # Path to the compressed archive file
          path: kernel_artifacts.tar.zst
          # Key includes suite and file hash, plus '-archive' suffix
          key: ${{ runner.os }}-${{ github.event.inputs.suite }}-${{ steps.hash.outputs.files_hash }}-archive

      - name: Decompress cached artifacts
        # Run only if the cache was hit
        if: steps.cache-kernel-archive.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "Cache hit. Decompressing artifacts..."
          # Ensure the target directory exists (it might not if build steps are skipped)
          mkdir -p ${{ env.KERNEL_PATH }}
          # Decompress the archive into the workspace root. Tar paths should be relative.
          tar -I zstd -xf kernel_artifacts.tar.zst -C ${{ github.workspace }}
          echo "Decompression complete."

      - name: Install dependencies
        # Run only if the cache was missed
        if: steps.cache-kernel-archive.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update && apt-get purge needrestart -y && sudo apt-get upgrade -y
          sudo apt-get install -y build-essential gcc-aarch64-linux-gnu bison \
          qemu-user-static qemu-system-arm qemu-efi-aarch64 u-boot-tools binfmt-support \
          debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \
          udev dosfstools uuid-runtime git-lfs device-tree-compiler python3 \
          python-is-python3 fdisk bc debhelper python3-pyelftools python3-setuptools \
          python3-pkg-resources swig libfdt-dev libpython3-dev gawk

      - name: Build
        # Run only if the cache was missed
        if: steps.cache-kernel-archive.outputs.cache-hit != 'true'
        shell: bash
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: sudo -E ${{ env.RECIPE_PATH }}/build.sh --suite=${{ github.event.inputs.suite }} --kernel-only

      - name: Fix build output permissions
        # Run only if the cache was missed (and build happened)
        if: steps.cache-kernel-archive.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Fixing permissions in ${{ env.KERNEL_PATH }}"
          # Fix ownership for the whole kernel build dir before compression/upload
          sudo chown -R runner:runner ${{ env.KERNEL_PATH }}
          echo "Permissions fixed."

      - name: Compress artifacts for cache
        # Run only if the cache was missed (after build and permission fix)
        if: steps.cache-kernel-archive.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Cache miss. Compressing artifacts..."
          # Go to the parent directory of KERNEL_PATH to archive relative paths
          parent_dir=$(dirname "${{ env.KERNEL_PATH }}")
          kernel_dir_name=$(basename "${{ env.KERNEL_PATH }}")
          echo "Archiving .deb files from $parent_dir/$kernel_dir_name"
          # Find .deb files within the kernel dir and create the archive at the workspace root using zstd
          (cd "$parent_dir" && find "$kernel_dir_name" -name 'linux-*.deb' -print0 | tar --null --files-from - -I zstd -cf "${{ github.workspace }}/kernel_artifacts.tar.zst")
          echo "Compression complete: ${{ github.workspace }}/kernel_artifacts.tar.zst"

      - name: Upload build artifacts
        # This step runs regardless of cache hit/miss
        # It uploads the .deb files which are either freshly built or restored from cache
        uses: actions/upload-artifact@v4.3.3
        with:
            name: ${{ steps.vars.outputs.artifact_name }}
            path: ${{ steps.vars.outputs.artifact_path }} # Use original wildcard path for upload
            if-no-files-found: error
